{"ast":null,"code":"import { modifiers as modifierKeys, ALL_KEYS, ALL_PRINTABLE_KEYS } from './keys';\nvar PRINTABLE_CHARACTERS = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$%^&*()-_+=[]\\\\{}|;\\':\",./<>?Â£';\nvar modKeys = Object.keys(modifierKeys);\n\nfunction matchKeys(_ref) {\n  var keySet = _ref.keySet,\n      event = _ref.event;\n  var key = keySet.key,\n      _keySet$modifiers = keySet.modifiers,\n      modifiers = _keySet$modifiers === undefined ? [] : _keySet$modifiers;\n  var keysMatch = void 0;\n  keysMatch = key === ALL_KEYS;\n\n  if (key === ALL_PRINTABLE_KEYS) {\n    if (event.key) {\n      // Modern browsers implement `key`, so if `key` is length 1, we have a match. e.g. 'a' for the\n      // a key, or '2' for the 2 key. All other non-printable characters have names, e.g. 'Enter' or 'Backspace'.\n      keysMatch = event.key.length === 1;\n    } else {\n      // For browsers that do no support `event.key`, we test against a list of characters\n      var pressedChar = String.fromCharCode(event.charCode);\n      keysMatch = PRINTABLE_CHARACTERS.indexOf(pressedChar) >= 0;\n    }\n  }\n\n  if (key === event.which) {\n    var evtModKeys = modKeys.filter(function (modKey) {\n      return event[modKey + 'Key'];\n    }).sort();\n    keysMatch = modifiers.length === evtModKeys.length && modifiers.every(function (modKey, index) {\n      return evtModKeys[index] === modKey;\n    });\n  }\n\n  return keysMatch;\n}\n\nexport default matchKeys;","map":null,"metadata":{},"sourceType":"module"}