{"ast":null,"code":"function _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n/* eslint-disable no-use-before-define */\n\n/**\n * @module eventHandlers\n *\n */\n\n\nimport domHelpers from './lib/dom_helpers';\nimport listeners from './lib/listeners';\nimport * as store from './store';\n/**\n * private\n *\n */\n\n/**\n * _onClick\n *\n * @access private\n * @param {object} event The click event object\n * @param {object} event.target The DOM node from the click event\n */\n\nexport function _onClick(_ref) {\n  var target = _ref.target;\n  store.activate([].concat(_toConsumableArray(store.getInstances())).reduce(domHelpers.findContainerNodes(target), []).sort(domHelpers.sortByDOMPosition).map(function (item) {\n    return item.instance;\n  }));\n}\n/**\n * _onKeyDown: The keydown event callback\n *\n * @access private\n * @param {object} event The keydown event object\n * @param {number} event.which The key code (which) received from the keydown event\n */\n\nexport function _onKeyDown(event) {\n  var forceConsider = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (forceConsider || _shouldConsider(event)) {\n    var _ref2 = store.findBindingForEvent(event) || {},\n        fn = _ref2.fn,\n        instance = _ref2.instance;\n\n    if (fn) {\n      fn.call(instance, event);\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * _shouldConsider: Conditions for proceeding with key event handling\n *\n * @access private\n * @param {object} event The keydown event object\n * @param {object} event.target The node origin of the event\n * @return {boolean} Whether to continue procesing the keydown event\n */\n\nexport function _shouldConsider(_ref3) {\n  var ctrlKey = _ref3.ctrlKey,\n      target = _ref3.target;\n  return ctrlKey || !~['INPUT', 'SELECT', 'TEXTAREA'].indexOf(target.tagName) && (!target.getAttribute || target.getAttribute('role') !== 'textbox');\n}\n/**\n * public\n *\n */\n\n/**\n * onMount\n *\n * @access public\n */\n\nfunction onMount(instance) {\n  store.activate(instance);\n  listeners.bindKeys(_onKeyDown);\n  listeners.bindClicks(_onClick);\n  domHelpers.bindFocusables(instance, store.activate);\n}\n/**\n * onUnmount\n *\n * @access public\n */\n\n\nfunction onUnmount(instance) {\n  store.deleteInstance(instance);\n\n  if (store.isEmpty()) {\n    listeners.unbindClicks(_onClick);\n    listeners.unbindKeys(_onKeyDown);\n  }\n}\n\nexport { onMount, onUnmount };","map":null,"metadata":{},"sourceType":"module"}