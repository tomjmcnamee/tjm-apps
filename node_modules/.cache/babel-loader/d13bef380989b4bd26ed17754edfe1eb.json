{"ast":null,"code":"var _jsxFileName = \"/Users/tommcnamee/Documents/Projects/tjm-games/src/Containers/ShutTheBox.js\";\nimport React from 'react';\nimport GameBoard from '../Components/stb-gameBoard';\nimport NumberTiles from '../Components/stb-numberTiles';\nimport DiceRoll from '../Components/stb-diceRoll';\n\nclass ShutTheBox extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      board: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n      oneClickIndex: null,\n      comboArray: [],\n      currentRoll: null\n    };\n\n    this.youLose = () => {//function for when the player LOSES\n    };\n\n    this.youWin = () => {//function for when the player WINS\n    };\n\n    this.twoSum = function (arr, target) {\n      let result = [];\n\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n          if (arr[i] + arr[j] === target) {\n            result.push(i);\n            result.push(j);\n          }\n        }\n      }\n\n      return result;\n    };\n\n    this.rollHandler = rollSum => {\n      let newComboArray = this.twoSum(this.state.board, rollSum);\n\n      if (!!this.state.board.indexOf(rollSum)) {\n        newComboArray.push(rollSum);\n      }\n\n      this.setState({\n        comboArray: newComboArray\n      });\n    };\n  }\n\n  componentDidMount() {\n    document.title = \"TJM - Shut The Box\";\n  } // ends component did\n\n\n  // closes rollHandler\n  render() {\n    let comboArray = this.twoSum(this.state.board, this.props.stb_RollTotal);\n\n    if (!!this.state.board.indexOf(this.props.stb_RollTotal)) {\n      comboArray.push(this.props.RollTotal);\n      console.log(\"you still got moves!\"); // } else if (comboArray.length > 0 ) {\n      // switch (comboArray.length) {\n      //   case 2:\n      //     this.setState({\n      //       comboClick: {comboArray}\n      //     })\n      //     break;\n      //   case 4:\n      //     let newComboClicks = {comboArray.splice(0,2), comboArray.splice(0,2)}\n      //     this.setState({\n      //       comboClick: newComboClicks\n      //     })\n      //     break;\n      //   case 6:\n      //     let newComboClicks = {comboArray.splice(0,2), comboArray.splice(0,2), comboArray.splice(0,2)}\n      //     this.setState({\n      //       comboClick: newComboClicks\n      //     })\n      //     break;\n      //   case 8:\n      //     let newComboClicks = {comboArray.splice(0,2), comboArray.splice(0,2), comboArray.splice(0,2), comboArray.splice(0,2)}\n      //     this.setState({\n      //       comboClick: newComboClicks\n      //     })\n      //     break;\n      //   case 10:\n      //     let newComboClicks = {comboArray.splice(0,2), comboArray.splice(0,2), comboArray.splice(0,2), comboArray.splice(0,2), comboArray.splice(0,2)}\n      //     this.setState({\n      //       comboClick: newComboClicks\n      //     })\n      //     break;\n      //   default:\n      //     break;\n      // }\n      //This is where I have to see if any TWO tiles add up to rollSum\n    } else {\n      this.props.youLose();\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(DiceRoll, {\n      rollHandler: this.rollHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(NumberTiles, {\n      numbersInPlay: this.state.board,\n      validOptions: this.state.comboArray,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    })) // closes parent div\n    ; // closes RETURN\n  } //closes RENDER\n\n\n} // closes APP\n\n\nexport default ShutTheBox;","map":{"version":3,"sources":["/Users/tommcnamee/Documents/Projects/tjm-games/src/Containers/ShutTheBox.js"],"names":["React","GameBoard","NumberTiles","DiceRoll","ShutTheBox","Component","state","board","oneClickIndex","comboArray","currentRoll","youLose","youWin","twoSum","arr","target","result","i","length","j","push","rollHandler","rollSum","newComboArray","indexOf","setState","componentDidMount","document","title","render","props","stb_RollTotal","RollTotal","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,QAAP,MAAqB,4BAArB;;AAGA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AAAA;AAAA;AAAA,SACvCC,KADuC,GAC/B;AACNC,MAAAA,KAAK,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB,EAAmB,EAAnB,EAAsB,EAAtB,EAAyB,EAAzB,CADD;AAENC,MAAAA,aAAa,EAAE,IAFT;AAGNC,MAAAA,UAAU,EAAE,EAHN;AAINC,MAAAA,WAAW,EAAE;AAJP,KAD+B;;AAAA,SAcvCC,OAduC,GAc7B,MAAM,CACd;AACD,KAhBsC;;AAAA,SAkBvCC,MAlBuC,GAkB9B,MAAM,CACb;AACD,KApBsC;;AAAA,SAsBvCC,MAtBuC,GAsB9B,UAAUC,GAAV,EAAeC,MAAf,EAAuB;AAC9B,UAAIC,MAAM,GAAG,EAAb;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAAG,CAACI,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnC,aAAK,IAAIE,CAAC,GAAGF,CAAC,GAAG,CAAjB,EAAoBE,CAAC,GAAGL,GAAG,CAACI,MAA5B,EAAoCC,CAAC,EAArC,EAAyC;AACvC,cAAIL,GAAG,CAACG,CAAD,CAAH,GAASH,GAAG,CAACK,CAAD,CAAZ,KAAoBJ,MAAxB,EAAgC;AAC5BC,YAAAA,MAAM,CAACI,IAAP,CAAYH,CAAZ;AACAD,YAAAA,MAAM,CAACI,IAAP,CAAYD,CAAZ;AACH;AACF;AACF;;AACD,aAAOH,MAAP;AACD,KAjCsC;;AAAA,SAmCvCK,WAnCuC,GAmCxBC,OAAD,IAAa;AACzB,UAAIC,aAAa,GAAG,KAAKV,MAAL,CAAY,KAAKP,KAAL,CAAWC,KAAvB,EAA8Be,OAA9B,CAApB;;AACA,UAAI,CAAC,CAAC,KAAKhB,KAAL,CAAWC,KAAX,CAAiBiB,OAAjB,CAAyBF,OAAzB,CAAN,EAAyC;AACvCC,QAAAA,aAAa,CAACH,IAAd,CAAmBE,OAAnB;AACD;;AACD,WAAKG,QAAL,CAAc;AACZhB,QAAAA,UAAU,EAAEc;AADA,OAAd;AAGD,KA3CsC;AAAA;;AAOvCG,EAAAA,iBAAiB,GAAE;AACjBC,IAAAA,QAAQ,CAACC,KAAT,GAAiB,oBAAjB;AACD,GATsC,CASpC;;;AAkCD;AAKJC,EAAAA,MAAM,GAAG;AACP,QAAIpB,UAAU,GAAG,KAAKI,MAAL,CAAY,KAAKP,KAAL,CAAWC,KAAvB,EAA8B,KAAKuB,KAAL,CAAWC,aAAzC,CAAjB;;AACI,QAAI,CAAC,CAAC,KAAKzB,KAAL,CAAWC,KAAX,CAAiBiB,OAAjB,CAAyB,KAAKM,KAAL,CAAWC,aAApC,CAAN,EAA0D;AACtDtB,MAAAA,UAAU,CAACW,IAAX,CAAgB,KAAKU,KAAL,CAAWE,SAA3B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAFsD,CAG1D;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACD,KA3CD,MA2CO;AACL,WAAKJ,KAAL,CAAWnB,OAAX;AACD;;AAGH,WAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD;AAAU,MAAA,WAAW,EAAE,KAAKU,WAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,WAAD;AAAa,MAAA,aAAa,EAAE,KAAKf,KAAL,CAAWC,KAAvC;AAA8C,MAAA,YAAY,EAAE,KAAKD,KAAL,CAAWG,UAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAFF,CAKS;AALT,KAlDK,CAwDH;AACH,GAzGsC,CAyGrC;;;AAzGqC,C,CA4GtC;;;AAEH,eAAeL,UAAf","sourcesContent":["import React from 'react';\nimport GameBoard from '../Components/stb-gameBoard'\nimport NumberTiles from '../Components/stb-numberTiles'\nimport DiceRoll from '../Components/stb-diceRoll'\n\n\nclass ShutTheBox extends React.Component {\n  state = {\n    board: [1,2,3,4,5,6,7,8,9,10,11,12],\n    oneClickIndex: null,\n    comboArray: [],\n    currentRoll: null\n  }\n  componentDidMount(){\n    document.title = \"TJM - Shut The Box\"    \n  }  // ends component did\n\n\n\n\n  youLose = () => {\n    //function for when the player LOSES\n  }\n\n  youWin = () => {\n    //function for when the player WINS\n  }\n\n  twoSum = function (arr, target) {\n    let result = [];\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = i + 1; j < arr.length; j++) {\n        if (arr[i] + arr[j] === target) {\n            result.push(i);\n            result.push(j);\n        }\n      }\n    }\n    return result;\n  } // ends twoSum function \n\n  rollHandler = (rollSum) => {\n    let newComboArray = this.twoSum(this.state.board, rollSum)\n    if (!!this.state.board.indexOf(rollSum)) {\n      newComboArray.push(rollSum)\n    }\n    this.setState({\n      comboArray: newComboArray\n    })\n  } // closes rollHandler\n\n\n\n\nrender() {\n  let comboArray = this.twoSum(this.state.board, this.props.stb_RollTotal)\n      if (!!this.state.board.indexOf(this.props.stb_RollTotal)) {\n          comboArray.push(this.props.RollTotal)\n          console.log(\"you still got moves!\")\n      // } else if (comboArray.length > 0 ) {\n        // switch (comboArray.length) {\n        //   case 2:\n        //     this.setState({\n        //       comboClick: {comboArray}\n        //     })\n        //     break;\n        //   case 4:\n        //     let newComboClicks = {comboArray.splice(0,2), comboArray.splice(0,2)}\n        //     this.setState({\n        //       comboClick: newComboClicks\n        //     })\n        //     break;\n        //   case 6:\n        //     let newComboClicks = {comboArray.splice(0,2), comboArray.splice(0,2), comboArray.splice(0,2)}\n        //     this.setState({\n        //       comboClick: newComboClicks\n        //     })\n        //     break;\n        //   case 8:\n        //     let newComboClicks = {comboArray.splice(0,2), comboArray.splice(0,2), comboArray.splice(0,2), comboArray.splice(0,2)}\n        //     this.setState({\n        //       comboClick: newComboClicks\n        //     })\n        //     break;\n        //   case 10:\n        //     let newComboClicks = {comboArray.splice(0,2), comboArray.splice(0,2), comboArray.splice(0,2), comboArray.splice(0,2), comboArray.splice(0,2)}\n        //     this.setState({\n        //       comboClick: newComboClicks\n        //     })\n        //     break;\n        //   default:\n        //     break;\n        // }\n\n\n\n\n\n        //This is where I have to see if any TWO tiles add up to rollSum\n      } else {\n        this.props.youLose()\n      }\n  \n\n    return(\n\n      <div>\n        <DiceRoll rollHandler={this.rollHandler}/>\n        <NumberTiles numbersInPlay={this.state.board} validOptions={this.state.comboArray}/>\n      </div> // closes parent div\n    ) // closes RETURN\n  } //closes RENDER\n\n\n}  // closes APP\n\nexport default ShutTheBox"]},"metadata":{},"sourceType":"module"}